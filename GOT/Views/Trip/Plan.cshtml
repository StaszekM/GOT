@model GOT.Models.Trip
@using GOT.Controllers
@{
    ViewData["Title"] = "Zaplanuj wycieczkę";
}
@if (TempData["Message"] != null) {
    string typeClass = "";
    switch ((MessageType)TempData["MessageType"]) {
        case MessageType.SUCCESS:
            typeClass = "alert-success";
            break;
        case MessageType.DANGER:
            typeClass = "alert-danger";
            break;
        case MessageType.INFO:
            typeClass = "alert-info";
            break;
        case MessageType.WARNING:
            typeClass = "alert-warning";
            break;
    }

    <div class="alert @typeClass alert-dismissible fade show" role="alert">
        @TempData["Message"]
        <button type="button" class="close" data-dismiss="alert" aria-label="Zamknij">
            <span aria-hidden="true">&times;</span>
        </button>
    </div>
}
<h1>Planowanie wycieczki</h1>
<hr />
<div class="container">
    <div class="row">
        <div class="col-md-5">
            <h5>Statystyki wycieczki</h5>
            <table class="table table-striped table-bordered ">
                <thead>
                    <tr>
                        <th>
                            @Html.DisplayNameFor(model => model.Score)
                        </th>
                        <th>
                            Suma wejść
                        </th>
                        <th>
                            Długość
                        </th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td>
                            @Html.DisplayFor(model => model.Score)
                        </td>
                        <td>
                            @TempData["Elevation"]
                        </td>
                        <td>
                            @TempData["Distance"]
                        </td>
                    </tr>
                </tbody>
            </table>
        </div>
    </div>
    <div class="row">
        <div class="col table-responsive">
            <table class="table table-striped table-bordered">
                <thead>
                    <tr>
                        <th>
                            Nr
                        </th>
                        <th>
                            Nazwa trasy
                        </th>
                        <th>
                            Suma wejść
                        </th>
                        <th>
                            Długość
                        </th>
                        <th>
                            Obszar punktu początkowego
                        </th>
                        <th>
                            Punkt początkowy
                        </th>
                        <th>
                            Obszar punktu końcowego
                        </th>
                        <th>
                            Punkt końcowy
                        </th>
                        <th>
                            Punkty
                        </th>
                    </tr>

                </thead>
                <tbody>
                    @if (Model.PathTrips != null) {
                        @foreach (var item in Model.PathTrips) {
                            <tr>
                                <td>
                                    @item.Order
                                </td>
                                <td>
                                    @Html.DisplayFor(model => item.Path.PathName)
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.ElevationAB)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.ElevationBA)
                                    }
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.DistanceAB)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.DistanceBA)
                                    }
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.CheckpointA.Area)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.CheckpointB.Area)
                                    }
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.CheckpointA.CheckpointName)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.CheckpointB.CheckpointName)
                                    }
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.CheckpointB.Area)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.CheckpointA.Area)
                                    }
                                </td>
                                <td>
                                    @if (item.Path.IsFromAToB) {
                                        @Html.DisplayFor(model => item.Path.CheckpointB.CheckpointName)
                                    } else {
                                        @Html.DisplayFor(model => item.Path.CheckpointA.CheckpointName)
                                    }
                                </td>
                                <td>
                                    test
                                    <!--replace with proper score calculation-->
                                </td>
                            </tr>
                        }}
                </tbody>
            </table>
        </div>

    </div>
    <div class="row mt-3">
        <div class="col">
            <button @((Model.PathTrips?.Count() ?? 0) == 0 ? "disabled" : "") class="btn btn-light mr-3" onclick="handleRemoveLastPathClick(event)">Usuń ostatnią dodaną trasę</button>
            <button class="btn btn-light mr-3" onclick="handleAddPathClick(event)">Dodaj trasę</button>
            <button class="btn btn-primary" onclick="handleSaveTripClick(event)">Zapisz wycieczkę</button>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        function handleRemoveLastPathClick(event) {
            location.href = '@Url.Action("RemoveLastPath")'
        }

        function handleAddPathClick(event) {
            location.href = '@Url.Action("ShowPathSelection")'
        }

        function handleSaveTripClick(event) {
            location.href = '@Url.Action("SavePlan")'
        }
    </script>
}